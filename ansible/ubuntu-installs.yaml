---
- name: Install packages on Ubuntu
  hosts: localhost
  become: true
  vars:
     - go_version: 1.23.3
     - asdf_version: 0.14.1
     - target_home: "{{ lookup('env', 'HOME') }}"
  environment:
    HOME: "{{ target_home }}"
  tasks:
    - name: Debug the user and home directory
      ansible.builtin.debug:
        msg: "Home is: {{ target_home }}"

    - name: Update the apt package index
      apt:
        update_cache: yes

    - name: Update or upgrade packages
      apt:
        name: "{{ item }}"
        state: latest  # Ensure the latest version is installed
      loop:
        - gcc 
        - qemu-system-x86
        - qemu-utils
        - make
        - jq
        - ripgrep
        - delta
        - unzip
        - gh
        - tmux
        - fzf
        - luarocks

    - name: Set up tmux theme
      block:
        - name: Ensure the target directory exists
          file:
            path: "{{ ansible_env.HOME }}/.config/tmux/plugins/rose-pine"
            state: directory
            mode: '0755'

        - name: Clone the Catppuccin tmux repository
          git:
            repo: https://github.com/rose-pine/tmux.git
            dest: "{{ ansible_env.HOME }}/.config/tmux/plugins/rose-pine/tmux"
            force: yes

    - name: Install Fish
      block:
        - name: Add Fish PPA repository
          apt_repository:
            repo: ppa:fish-shell/release-3
            state: present

        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install Fish shell
          apt:
            name: fish
            state: present

        - name: Ensure Fish shell is in /etc/shells
          lineinfile:
            path: /etc/shells
            line: /usr/bin/fish
            state: present

        # should do the same as chsh -s /usr/bin/fish <username>
        - name: Set Fish as the default shell for the current user
          user:
            name: "{{ ansible_facts['user_id'] }}"
            shell: /usr/bin/fish

    - name: Install Neovim
      block:
        - name: Download Neovim tarball
          get_url:
            url: https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
            dest: /tmp/nvim-linux64.tar.gz
            mode: '0644'
          register: download_status

        - name: Remove existing Neovim installation
          ansible.builtin.file:
            path: /opt/nvim
            state: absent
          when: download_status.changed  # Remove only if the tarball was re-downloaded

        - name: Extract Neovim to /opt
          ansible.builtin.unarchive:
            src: /tmp/nvim-linux64.tar.gz
            dest: /opt
            remote_src: yes
          when: download_status.changed  # Extract only if the tarball was re-downloaded

        - name: Clean up downloaded tarball
          ansible.builtin.file:
            path: /tmp/nvim-linux64.tar.gz
            state: absent

    # Install Docker

    - name: Install Docker
      block:
        - name: Add an Apt signing key, uses whichever key is at the URL
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu noble stable
            state: present

        - name: Install Docker
          apt:
            name: docker-ce
            state: present
            update_cache: yes

        - name: Start Docker service
          service:
            name: docker
            state: started
            enabled: yes

    # Install Go

    - stat:
        path: "/usr/local/go/bin/go"
      register: go_installed

    - name: Install Go
      block:
        - name: Download Go tar file
          command: wget https://go.dev/dl/go{{go_version}}.linux-amd64.tar.gz

        - name: Delete previous installation
          command: rm -rf /usr/local/go

        - name: Extract and move new Go folder to /usr/local
          command: tar -C /usr/local -xzf go{{go_version}}.linux-amd64.tar.gz

        - name: Delete downloaded tar file
          shell: rm -rf go{{go_version}}.linux-amd64.tar.gz*

        - name: Add Go binary path to ~/.profile
          lineinfile:
            path: ~/.profile
            line: |
              export PATH=$PATH:/usr/local/go/bin
              # export XDG_CONFIG_HOME="~/.config"
            create: true
            state: present

        - name: Source updated profile
          shell: . ~/.profile
      when: go_installed.stat.exists == false

    # test if nvm has been installed by the user desired
    - stat:
        path: "$HOME/.nvm"
      register: nvm_path

    - name: Setup ASDF and install node version
      block:
        - name: Clone ASDF repository
          shell: >
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v{{ asdf_version }}
          args:
            chdir: "$HOME"
            creates: "$HOME/.asdf"

        - name: Verify ASDF directory exists
          stat:
            path: "$HOME/.asdf"
          register: asdf_dir

        - name: Debug output
          debug:
            msg: "ASDF directory status: {{ asdf_dir }}"

        - name: Configure ASDF completions for Fish
          shell: >
            mkdir -p ~/.config/fish/completions && ln -s ~/.asdf/completions/asdf.fish ~/.config/fish/completions
          args:
            chdir: "$HOME"
            creates: "$HOME/.config/fish/completions/asdf.fish"

        - name: Install ASDF Node.js plugin
          shell: >
            fish -c "source ~/.asdf/asdf.fish && asdf plugin add nodejs || true"
          args:
            chdir: "$HOME"

    - name: Install Node.js versions using ASDF
      shell: >
        fish -c "asdf install nodejs {{ item }} --latest && asdf global nodejs {{ item }} && npm install -g @fsouza/prettierd"
      args:
        chdir: "$HOME"
        creates: "$HOME/.asdf/installs/nodejs/{{ item }}"
      loop:
        - 16.20.0
        - 22.12.0

    - name: Install Starship Prompt
      block:
        - name: Check if Starship is already installed
          stat:
            path: /usr/local/bin/starship
          register: starship_installed

        - name: Prompt user for confirmation to install Starship
          ansible.builtin.pause:
            prompt: "Starship is not installed. Do you want to install it using the shell script? (Press 'y' to continue)"
          when: not starship_installed.stat.exists
          register: user_input

        - name: Install Starship via shell script
          shell: |
            curl -L -sS https://starship.rs/install.sh | sh -s -- --yes
          args:
            executable: /bin/bash
          when:
            - not starship_installed.stat.exists
            - user_input.user_input == 'y'

      rescue:
        - name: Notify user of failed installation
          debug:
            msg: "Starship installation failed. Please check the error and try again."

      always:
        - name: Inform user of current state
          debug:
            msg: >
              {%- if starship_installed.stat.exists -%}
              Starship is already installed.
              {%- else -%}
              Starship was not installed. Skipped by user or failed.
              {%- endif -%}
