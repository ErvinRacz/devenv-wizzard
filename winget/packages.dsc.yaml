# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  resources:
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install latest PowerShell
        allowPrerelease: true
      settings:
        id: Microsoft.PowerShell
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'fd' file finder
        allowPrerelease: true
      settings:
        id: sharkdp.fd
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'ripgrep'
        allowPrerelease: true
      settings:
        id: BurntSushi.ripgrep.MSVC
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'starship' cross shell prompt
        allowPrerelease: true
      settings:
        id: Starship.Starship
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'wezterm'
        allowPrerelease: true
      settings:
        id: wez.wezterm
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'chezmoi' dotfile manager
        allowPrerelease: true
      settings:
        id: twpayne.chezmoi
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: zig
      directives:
        description: Install 'Zig' for its C compiler capabilities
        allowPrerelease: true
      settings:
        id: zig.zig
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      dependsOn:
        - zig
      directives:
        description: Install 'Neovim'
        allowPrerelease: true
      settings:
        id: Neovim.Neovim
        source: winget
    - resource: PSDscResources/Script
      id: SetXDGConfigHome
      directives:
        description: Set XDG_CONFIG_HOME environment variable
      settings:
        GetScript: |
          # Check if the environment variable XDG_CONFIG_HOME is set
          if ($env:XDG_CONFIG_HOME) {
              Write-Output "XDG_CONFIG_HOME is already set to: $env:XDG_CONFIG_HOME"
          } else {
              Write-Output "XDG_CONFIG_HOME is not set."
          }
        TestScript: |
          # Check if the environment variable is set to the desired value
          return $env:XDG_CONFIG_HOME -eq "$env:USERPROFILE\.config"
        SetScript: |
          # Set the XDG_CONFIG_HOME environment variable
          [System.Environment]::SetEnvironmentVariable('XDG_CONFIG_HOME', "$env:USERPROFILE\.config", [System.EnvironmentVariableTarget]::User)
          Write-Output "XDG_CONFIG_HOME set to $env:USERPROFILE\.config"
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'delta' for diffs
        allowPrerelease: true
      settings:
        id: dandavison.delta
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Install 'jq' json query language
        allowPrerelease: true
      settings:
        id: jqlang.jq
        source: winget
    ### -------------------------------------
    ### Install Chocolatey
    ### -------------------------------------
    - resource: cChoco/cChocoInstaller
      id: choco
      directives:
        description: Install Choco
        allowPrerelease: true
      settings:
        InstallDir: 'c:\choco'
    ### -------------------------------------
    - resource: cChoco/cChocoPackageInstaller
      id: watchmanInstall
      directives:
        description: Choco install watchman
        allowPrerelease: true
      dependsOn:
        - choco
      settings:
        Name: watchman

    ###
    # Leave it here as example, but no need for it as we can add files with chezmoi
    ###
    # - resource: File
    #   id: CopyStartupScript
    #   dependsOn:
    #     - watchmanInstall
    #   directives:
    #     description: Ensure the startup script is copied to the Startup folder
    #   settings:
    #     DestinationPath: "$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\run_once_and-on-startup.ps1"
    #     SourcePath: "$(chezmoi source-path)\\dotfiles\\.chezmoiscripts\\run_once_and-on-startup.ps1"
    #     Ensure: "Present"
    #     Type: "File"